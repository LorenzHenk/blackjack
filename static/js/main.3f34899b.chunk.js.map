{"version":3,"sources":["pages/routes.ts","utils/card.tsx","utils/deck.ts","utils/count.ts","pages/PracticeBasicCounting/Game.tsx","pages/PracticeBasicCounting/StartScreen.tsx","pages/PracticeBasicCounting/index.tsx","pages/mapping.ts","pages/Home/index.tsx","containers/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Routes","routeToUrlMapping","Home","PracticeBasicCounting","getUrl","route","Value","Suit","RED_SUITS","Hearts","Diamonds","String","fromCodePoint","PlayingCard","props","style","color","card","includes","suit","value","getCardEmoji","defaultDeck","Spades","Clubs","Ace","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King","push","createDeck","options","cardAmountFactor","deck","i","shuffle","CARD_TO_COUNT_VALUE_MAPPING","high","neutral","low","getCardCountValue","useDeck","deckAmount","useState","setDeck","currentIndex","setCurrentIndex","nextCard","useCallback","v","currentCard","finished","deckCountValueWithoutCurrentCard","reduce","acc","next","getDeckCountValue","slice","cardCountValue","cardsLeft","length","cardsDone","reset","useStyles","makeStyles","theme","root","display","height","padding","spacing","gridTemplateAreas","gridTemplateRows","justifyItems","overflow","Runner","settings","onReset","deckCount","classes","errors","setErrors","Date","startTime","endTime","setEndTime","rotation","setRotation","guessValue","realLifeMode","Math","round","random","console","log","err","useEffect","transitions","useTransition","c","from","opacity","transform","position","enter","leave","countValue","errorProps","useSpring","o","r","useHotkeys","className","Box","gridArea","flexDirection","Typography","variant","align","getTime","toPrecision","alignItems","role","aria-label","map","item","key","div","interpolate","range","output","fontSize","paddingBottom","Button","onClick","ButtonGroup","size","disableElevation","disabled","description","minHeight","rules","gridTemplateColumns","gridGap","justifySelf","typography","h5","cards","h1","borderLeft","borderLeftColor","palette","action","selected","StartScreen","setRealLifeMode","setDeckCount","gutterBottom","FormControlLabel","control","Checkbox","checked","onChange","event","target","label","id","Slider","_event","valueLabelDisplay","step","marks","min","max","onStart","initialSettings","routeToComponentMapping","to","started","setStarted","setSettings","Main","children","createMuiTheme","primary","main","secondary","background","default","paper","overrides","MuiCssBaseline","App","ThemeProvider","CssBaseline","Object","keys","routeKey","RouteComponent","getRouteComponent","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wJAAYA,E,0EAAAA,K,YAAAA,E,+CAAAA,M,KAKZ,IAAMC,GAAyC,mBAC5CD,EAAOE,KAAO,KAD8B,cAE5CF,EAAOG,sBAAwB,4BAFa,GAKxC,SAASC,EAAOC,GACrB,OAAOJ,EAAkBI,G,ICTfC,EAgBAC,E,0CAhBAD,O,aAAAA,I,aAAAA,I,iBAAAA,I,eAAAA,I,eAAAA,I,aAAAA,I,iBAAAA,I,iBAAAA,I,eAAAA,I,aAAAA,I,gBAAAA,I,kBAAAA,I,iBAAAA,M,cAgBAC,O,mBAAAA,I,mBAAAA,I,uBAAAA,I,kBAAAA,M,KAOZ,IAAMC,EAAY,CAACD,EAAKE,OAAQF,EAAKG,UAaEC,OAAOC,cAFpB,QAQnB,SAASC,EAAYC,GAC1B,OACE,0BAAMC,MAAO,CAAEC,OAMOC,EANUH,EAAMG,KAOjCT,EAAUU,SAASD,EAAKE,MAPiB,MAAQ,WANnD,SAAsBF,GAC3B,OAAON,OAAOC,cATI,OAEP,GAO+BK,EAAKE,KAAcF,EAAKG,OAM7DC,CAAaP,EAAMG,OAKnB,IAAmBA,EC9C1B,I,qBADMK,EAAoB,GAC1B,MAAmB,CAACf,EAAKgB,OAAQhB,EAAKE,OAAQF,EAAKG,SAAUH,EAAKiB,OAAlE,eACE,IADG,IAAML,EAAI,KACb,MAAoB,CAClBb,EAAMmB,IACNnB,EAAMoB,IACNpB,EAAMqB,MACNrB,EAAMsB,KACNtB,EAAMuB,KACNvB,EAAMwB,IACNxB,EAAMyB,MACNzB,EAAM0B,MACN1B,EAAM2B,KACN3B,EAAM4B,IACN5B,EAAM6B,KACN7B,EAAM8B,MACN9B,EAAM+B,MAbR,eAcG,CAdE,IAAMjB,EAAK,KAedE,EAAYgB,KAAK,CAAEnB,OAAMC,UAWtB,SAASmB,EAAWC,GAKzB,IALuD,IAAD,UACrBA,QADqB,IACrBA,IAAW,IAApCC,wBAD8C,MAC3B,EAD2B,EAGhDC,EAAa,GAEVC,EAAI,EAAGA,EAAIF,EAAkBE,IACpCD,EAAKJ,KAAL,MAAAI,EAAapB,GAKf,OAFAsB,IAAQF,GAEDA,ECzCF,IAAMG,EAA8B,CACzCC,KAAM,CAACxC,EAAMmB,IAAKnB,EAAM+B,KAAM/B,EAAM8B,MAAO9B,EAAM6B,KAAM7B,EAAM4B,KAC7Da,QAAS,CAACzC,EAAMyB,MAAOzB,EAAM0B,MAAO1B,EAAM2B,MAC1Ce,IAAK,CAAC1C,EAAMwB,IAAKxB,EAAMuB,KAAMvB,EAAMsB,KAAMtB,EAAMqB,MAAOrB,EAAMoB,MAGvD,SAASuB,EAAkBhC,GAChC,OAAI4B,EAA4BC,KAAK5B,SAASD,EAAKG,QACzC,EACCyB,EAA4BE,QAAQ7B,SAASD,EAAKG,OACpD,EAEA,E,4CCFX,SAAS8B,EAAQC,GAAqB,IAAD,EACXC,oBAAS,kBAC/Bb,EAAW,CAAEE,iBAAkBU,OAFE,mBAC5BT,EAD4B,KACtBW,EADsB,OAKKD,mBAAS,GALd,mBAK5BE,EAL4B,KAKdC,EALc,KAO7BC,EAAWC,uBAAY,kBAAMF,GAAgB,SAACG,GAAD,OAAOA,EAAI,OAAI,IAE5DC,EAAejB,EAAKY,IAAiB,KAErCM,EAA2B,OAAhBD,EAEXE,EDLD,SAA2BnB,GAChC,OAAOA,EAAKoB,QACV,SAACC,EAAKC,GAAN,OAAeD,EAAMd,EAAkBe,KAJV,GCOUC,CACvCvB,EAAKwB,MAAM,EAAGZ,IAYhB,MAAO,CACLZ,OACAY,eACAE,WACAG,cACAC,WACAC,mCACAM,eAhBqBR,EAAcV,EAAkBU,GAAe,KAiBpES,UAfgB1B,EAAK2B,OAASf,EAgB9BgB,UAAWhB,EACXiB,MAfY,WACZlB,EAAQd,EAAW,CAAEE,iBAAkBU,KACvCI,EAAgB,KAiBpB,IAAMiB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,OAAQ,OACRC,QAASJ,EAAMK,UACfC,kBAAkB,mCAClBC,iBAAiB,8BACjBC,aAAc,SAEdC,SAAU,cASP,SAASC,EAAT,GAA+C,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,QAAkB,EAQ/CpC,EAAQmC,EAASE,WANnBpB,EAFiD,EAEjDA,eACAR,EAHiD,EAGjDA,YACAS,EAJiD,EAIjDA,UACAE,EALiD,EAKjDA,UACAV,EANiD,EAMjDA,SACAJ,EAPiD,EAOjDA,SAGIgC,EAAUhB,IAVmC,EAYvBpB,mBAAS,GAZc,mBAY5CqC,EAZ4C,KAYpCC,EAZoC,OAe/BtC,oBAAS,kBAAM,IAAIuC,QAAhCC,EAf4C,sBAgBrBxC,mBAAsB,MAhBD,mBAgB5CyC,EAhB4C,KAgBnCC,EAhBmC,OAkBnB1C,mBAAS,GAlBU,mBAkB5C2C,EAlB4C,KAkBlCC,EAlBkC,KAoB7CC,EAAa,SAAC7E,GAAD,OAAmB,WAC/BwC,IACCxC,IAAU+C,GACRkB,EAASa,cACXF,EAAYG,KAAKC,MAAsB,IAAhBD,KAAKE,WAE9B7C,MAEA8C,QAAQC,IAAR,8BACyBnF,EADzB,iCACuD+C,IAhBhCuB,GAAU,SAACc,GAAD,OAASA,EAAM,SA2BtDC,qBAAU,WACJ7C,GACFkC,EAAW,IAAIH,QAEhB,CAAC/B,IAEJ,IAAM8C,EAAcC,YAClB,CAAEhD,cAAaQ,mBACf,gBAAgByC,EAAhB,EAAGjD,YAAH,OAAyBiD,EAAIA,EAAEzF,KAAO,IAAMyF,EAAExF,MAAQ,iBACtD,CACEyF,KAAM,CACJC,QAAS,EACTC,UAAW,2BAEXC,SAAU,YAEZC,MAAO,CAAEH,QAAS,EAAGC,UAAW,yBAChCG,MAAO,gBAAmBC,EAAnB,EAAGhD,eAAH,MAAqC,CAC1C2C,QAAS,EACTC,UAAW,CACT,yBACA,2BACA,0BACA,OAACI,QAAD,IAACA,IAAc,GAAK,OAKtBC,EAAaC,YAAU,CAC3BC,EAAG7B,EAAS,EACZoB,KAAM,CACJS,EAAG,KAIDpB,EAAemB,YAAU,CAC7BE,EAAGxB,EACHc,KAAM,CAAEU,EAAG,KAOb,OAJAC,YAAW,QAASvB,EAAW,GAAK,CAACA,IACrCuB,YAAW,OAAQvB,GAAY,GAAI,CAACA,IACpCuB,YAAW,OAAQvB,EAAW,GAAI,CAACA,IAGjC,yBAAKwB,UAAWjC,EAAQb,MACtB,kBAAC+C,EAAA,EAAD,CAAK9C,QAAQ,OAAO+C,SAAS,aAAaC,cAAc,UACtD,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,UAC/BnE,EAAW,oCAAGU,EAAH,eAA8B,oCAAGF,EAAH,gBAG5C,kBAACyD,EAAA,EAAD,CACEC,QAAQ,QACRC,MAAM,SACN/G,MAAOyE,EAAS,QAAU,WAEzBA,EALH,kBAQC7B,GACC,kBAACiE,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,UAAlC,iBACiB,IACdlC,KACGA,EAAQmC,UAAYpC,EAAUoC,WAAa,KAAMC,YACjD,GACC,IALP,YAUJ,kBAACP,EAAA,EAAD,CAAKC,SAAS,UAAU/C,QAAQ,OAAOsD,WAAW,UAC/CtE,EACC,kBAACiE,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UACjB,IAAXtC,EACC,mEAEE,0BAAM0C,KAAK,MAAMC,aAAW,aAA5B,iBAKF,4DACwB3C,EAAS,EAAI,gBAAkB,GADvD,sBAMJiB,EAAY2B,KAAI,gBAAGC,EAAH,EAAGA,KAAMxH,EAAT,EAASA,MAAOyH,EAAhB,EAAgBA,IAAhB,OACd,kBAAC,IAASC,IAAV,CACED,IAAKA,EACLxH,MAAK,eACAD,IAGJwH,EAAK3E,aACJ,kBAAC,IAAS6E,IAAV,CACEzH,MAAO,CACLgG,UAAWK,EAAWE,EACnBmB,YAAY,CACXC,MAAO,CAAC,EAAG,GAAK,GAAK,GAAK,GAAK,GAC/BC,OAAQ,CAAC,GAAI,GAAI,IAAK,GAAI,GAAI,KAE/BF,aAAY,SAACnB,GAAD,2BAAqBA,EAAEW,YAAY,GAAnC,WAGjB,kBAAC,IAASO,IAAV,CACEzH,MAAO,CACLgG,UAAWb,EAAaqB,EAAEkB,aACxB,SAAClB,GAAD,uBAAiBA,EAAjB,aAIJ,0BACExG,MAAO,CACL6H,SAAU,UAGZ,kBAAC/H,EAAD,CAAaI,KAAMqH,EAAK3E,sBASxC,kBAAC+D,EAAA,EAAD,CAAKC,SAAS,UAAUkB,cAAe,GACpCjF,EACC,kBAACkF,EAAA,EAAD,CAAQC,QApIF,WACZzD,KAmI8BwC,QAAQ,YAAY9G,MAAM,WAAlD,kBAIA,kBAACgI,EAAA,EAAD,CACEC,KAAK,QACLnB,QAAQ,YACRoB,kBAAgB,EAChBlI,MAAM,WAEN,kBAAC8H,EAAA,EAAD,CAAQK,SAAUvF,EAAUmF,QAAS9C,GAAY,IAAjD,KAGA,kBAAC6C,EAAA,EAAD,CAAQK,SAAUvF,EAAUmF,QAAS9C,EAAW,IAAhD,KAGA,kBAAC6C,EAAA,EAAD,CAAQK,SAAUvF,EAAUmF,QAAS9C,EAAW,IAAhD,Q,4BCjPNzB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,OAAQ,OACRG,kBAAkB,qCAClBC,iBAAiB,8BACjBH,QAASJ,EAAMK,UACfG,aAAc,SAEdC,SAAU,UAEZiE,YAAa,CACXzB,SAAU,cACV/C,QAAS,OACTgD,cAAe,SACfyB,UAAW,GAEbC,MAAO,CACL1E,QAAS,OACTK,iBAAkB,cAClBsE,oBAAqB,uCACrBrB,WAAY,SACZ/C,SAAU,OACVqE,QAAS9E,EAAMK,UACfF,OAAQ,QAEVzD,MAAM,aACJqI,YAAa,OACV/E,EAAMgF,WAAWC,IAEtBC,MAAM,aACJH,YAAa,SACV/E,EAAMgF,WAAWG,GAFjB,CAGHC,WAAY,YACZC,gBAAiBrF,EAAMsF,QAAQC,OAAOC,eAmG3BC,I,EAAAA,EA3Ff,SAAqBrJ,GACnB,IAAM0E,EAAUhB,IADiB,EAGOpB,oBAAS,GAHhB,mBAG1B8C,EAH0B,KAGZkE,EAHY,OAIChH,mBAAS,GAJV,mBAI1BmC,EAJ0B,KAIf8E,EAJe,KAmBjC,OACE,kBAAC3C,EAAA,EAAD,CAAKD,UAAWjC,EAAQb,MACtB,kBAAC+C,EAAA,EAAD,CAAKD,UAAWjC,EAAQ4D,aACtB,kBAACvB,EAAA,EAAD,CAAYC,QAAQ,QAAQwC,cAAY,GAAxC,gFAIA,kBAACzC,EAAA,EAAD,CAAYE,MAAM,SAASD,QAAQ,KAAKwC,cAAY,GAApD,oCAGA,kBAAC5C,EAAA,EAAD,CAAKD,UAAWjC,EAAQ8D,OACtB,yBAAK7B,UAAWjC,EAAQpE,OAAxB,MACA,yBAAKqG,UAAWjC,EAAQoE,OACrB/G,EAA4BG,IAAIqF,KAAI,SAACjH,GAAD,OACnC,kBAACP,EAAD,CAAaI,KAAM,CAAEE,KAAMZ,EAAKgB,OAAQH,eAG5C,yBAAKqG,UAAWjC,EAAQpE,OAAxB,KACA,yBAAKqG,UAAWjC,EAAQoE,OACrB/G,EAA4BE,QAAQsF,KAAI,SAACjH,GAAD,OACvC,kBAACP,EAAD,CAAaI,KAAM,CAAEE,KAAMZ,EAAKgB,OAAQH,eAG5C,yBAAKqG,UAAWjC,EAAQpE,OAAxB,MACA,yBAAKqG,UAAWjC,EAAQoE,OACrB/G,EAA4BC,KAAKuF,KAAI,SAACjH,GAAD,OACpC,kBAACP,EAAD,CAAaI,KAAM,CAAEE,KAAMZ,EAAKgB,OAAQH,iBAMhD,kBAACsG,EAAA,EAAD,CAAKC,SAAS,YACZ,kBAACE,EAAA,EAAD,CAAYC,QAAQ,MAApB,YACA,kBAACyC,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEC,QAASxE,EACTyE,SAAU,SAACC,GAAD,OACRR,EAAgBQ,EAAMC,OAAOH,YAInCI,MAAM,mBAER,kBAACjD,EAAA,EAAD,CAAYkD,GAAG,kBAAkBT,cAAY,GAA7C,wBAGA,kBAACU,EAAA,EAAD,CACE5J,MAAOmE,EACPoF,SA/DmB,SACzBM,EACA7J,GAEqB,kBAAVA,GACTiJ,EAAajJ,IA2DT8J,kBAAkB,OAClBC,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK,KAGT,kBAAC5D,EAAA,EAAD,CAAKC,SAAS,WACZ,kBAACmB,EAAA,EAAD,CACEC,QAhEY,WAClBjI,EAAMyK,QAAQ,CAAErF,eAAcX,eAgExBuC,QAAQ,YACR9G,MAAM,YACNiI,KAAK,SAJP,YC1HKuC,EAA4B,CACvCtF,cAAc,EACdX,UAAW,GCVb,IAAMkG,GAA4D,mBAC/DzL,EAAOE,MCDH,WACL,OACE,oCAEE,kBAAC,IAAD,CAAMwL,GAAItL,EAAOJ,EAAOG,wBAAxB,+BDJ4D,cAE/DH,EAAOG,uBDWH,WAAkC,IAAD,EACRiD,oBAAS,GADD,mBAC/BuI,EAD+B,KACtBC,EADsB,OAGNxI,mBAAmBoI,GAHb,mBAG/BnG,EAH+B,KAGrBwG,EAHqB,KAYtC,OACE,oCACE,kBAACnE,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,SAASuC,cAAY,GAApD,4BAIDqB,EACC,kBAACvG,EAAD,CAAQE,QAVM,kBAAMsG,GAAW,IAUDvG,SAAUA,IAExC,kBAAC,EAAD,CAAakG,QAjBC,SAAClG,GACnBwG,EAAYxG,GACZuG,GAAW,UCpBmD,G,4BED5DpH,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJE,OAAQ,OACRwE,UAAW,EACXzE,QAAS,OACTgD,cAAe,SACf9C,QAASJ,EAAMK,eAUJ+G,OANf,YAAoD,IAApCC,EAAmC,EAAnCA,SACRvG,EAAUhB,IAEhB,OAAO,yBAAKiD,UAAWjC,EAAQb,MAAOoH,ICJlCrH,GAAQsH,YAAe,CAC3BhC,QAAS,CACPiC,QAAS,CACPC,KAAM,WAERC,UAAW,CAAED,KAAM,WACnBE,WAAY,CACVC,QAAS,UACTC,MAAO,YAGXC,UAAW,CACTC,eAAgB,CACd,UAAW,CACT,oBAAqB,CACnB3H,OAAQ,OACRM,SAAU,eA8BLsH,OAvBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAehI,MAAOA,IACpB,kBAACiI,EAAA,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,GAAD,KACE,kBAAC,IAAD,KACGC,OAAOC,KAAK7M,GAAQqI,KAAI,SAACyE,GACxB,IAAMzM,EAAQL,EAAQ8M,GAChBC,EHnCb,SAA2B1M,GAChC,OAAOoL,EAAwBpL,GGkCI2M,CAAkB3M,GACzC,OACE,kBAAC,IAAD,CAAO4M,OAAK,EAAC1E,IAAKlI,EAAO6M,KAAM9M,EAAOC,IACpC,kBAAC0M,EAAD,eCnCEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9H,QAAQ8H,MAAMA,EAAMC,c","file":"static/js/main.3f34899b.chunk.js","sourcesContent":["export enum Routes {\n  Home = \"Home\",\n  PracticeBasicCounting = \"PracticeBasicCounting\",\n}\n\nconst routeToUrlMapping: Record<Routes, string> = {\n  [Routes.Home]: \"/\",\n  [Routes.PracticeBasicCounting]: \"/practice/counting-basic\",\n};\n\nexport function getUrl(route: Routes): string {\n  return routeToUrlMapping[route];\n}\n","import React from \"react\";\n\nexport enum Value {\n  Ace,\n  Two,\n  Three,\n  Four,\n  Five,\n  Six,\n  Seven,\n  Eight,\n  Nine,\n  Ten,\n  Jack,\n  Queen = 12,\n  King = 13,\n}\n\nexport enum Suit {\n  Spades,\n  Hearts,\n  Diamonds,\n  Clubs,\n}\n\nconst RED_SUITS = [Suit.Hearts, Suit.Diamonds];\n\nexport interface Card {\n  value: Value;\n  suit: Suit;\n}\n\nconst START_POINT = 0x1f0a1;\n\nconst STEP = 0x0010;\n\nconst PLAYING_CARD_BACK = 0x1f0a0;\n\nexport const PLAYING_CARD_BACK_EMOJI = String.fromCodePoint(PLAYING_CARD_BACK);\n\nexport function getCardEmoji(card: Card) {\n  return String.fromCodePoint(START_POINT + card.suit * STEP + card.value);\n}\n\nexport function PlayingCard(props: { card: Card }) {\n  return (\n    <span style={{ color: isRedCard(props.card) ? \"red\" : \"black\" }}>\n      {getCardEmoji(props.card)}\n    </span>\n  );\n}\n\nexport function isRedCard(card: Card) {\n  return RED_SUITS.includes(card.suit);\n}\n","import { Card, Suit, Value } from \"./card\";\nimport shuffle from \"shuffle-array\";\n\nexport type Deck = Card[];\n\nconst defaultDeck: Deck = [];\nfor (const suit of [Suit.Spades, Suit.Hearts, Suit.Diamonds, Suit.Clubs]) {\n  for (const value of [\n    Value.Ace,\n    Value.Two,\n    Value.Three,\n    Value.Four,\n    Value.Five,\n    Value.Six,\n    Value.Seven,\n    Value.Eight,\n    Value.Nine,\n    Value.Ten,\n    Value.Jack,\n    Value.Queen,\n    Value.King,\n  ]) {\n    defaultDeck.push({ suit, value });\n  }\n}\n\ninterface CreateDeckOptions {\n  /**\n   * the number of decks used - cardAmountFactor * 52 is the number of cards used\n   */\n  cardAmountFactor?: number;\n}\n\nexport function createDeck(options?: CreateDeckOptions) {\n  const { cardAmountFactor = 1 } = options ?? {};\n\n  const deck: Deck = [];\n\n  for (let i = 0; i < cardAmountFactor; i++) {\n    deck.push(...defaultDeck);\n  }\n\n  shuffle(deck);\n\n  return deck;\n}\n","import { Card, Value } from \"./card\";\nimport { Deck } from \"./deck\";\n\nexport const CARD_TO_COUNT_VALUE_MAPPING = {\n  high: [Value.Ace, Value.King, Value.Queen, Value.Jack, Value.Ten],\n  neutral: [Value.Seven, Value.Eight, Value.Nine],\n  low: [Value.Six, Value.Five, Value.Four, Value.Three, Value.Two],\n};\n\nexport function getCardCountValue(card: Card): -1 | 0 | 1 {\n  if (CARD_TO_COUNT_VALUE_MAPPING.high.includes(card.value)) {\n    return -1;\n  } else if (CARD_TO_COUNT_VALUE_MAPPING.neutral.includes(card.value)) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\nconst INITIAL_DECK_COUNT_VALUE = 0;\n\nexport function getDeckCountValue(deck: Deck): number {\n  return deck.reduce(\n    (acc, next) => acc + getCardCountValue(next),\n    INITIAL_DECK_COUNT_VALUE\n  );\n}\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { Card, PlayingCard } from \"../../utils/card\";\nimport { createDeck } from \"../../utils/deck\";\nimport { getDeckCountValue, getCardCountValue } from \"../../utils/count\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { Typography, Box, makeStyles } from \"@material-ui/core\";\n\nimport { animated, useTransition, useSpring } from \"react-spring\";\n\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport { Settings } from \".\";\n\nfunction useDeck(deckAmount: number) {\n  const [deck, setDeck] = useState(() =>\n    createDeck({ cardAmountFactor: deckAmount })\n  );\n\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const nextCard = useCallback(() => setCurrentIndex((v) => v + 1), []);\n\n  const currentCard = (deck[currentIndex] || null) as Card | null;\n\n  const finished = currentCard === null;\n\n  const deckCountValueWithoutCurrentCard = getDeckCountValue(\n    deck.slice(0, currentIndex)\n  );\n\n  const cardCountValue = currentCard ? getCardCountValue(currentCard) : null;\n\n  const cardsLeft = deck.length - currentIndex;\n\n  const reset = () => {\n    setDeck(createDeck({ cardAmountFactor: deckAmount }));\n    setCurrentIndex(0);\n  };\n\n  return {\n    deck,\n    currentIndex,\n    nextCard,\n    currentCard,\n    finished,\n    deckCountValueWithoutCurrentCard,\n    cardCountValue,\n    cardsLeft,\n    cardsDone: currentIndex,\n    reset,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"grid\",\n    height: \"100%\",\n    padding: theme.spacing(),\n    gridTemplateAreas: `\"statistics\" \"content\" \"actions\"`,\n    gridTemplateRows: `min-content 1fr min-content`,\n    justifyItems: \"center\",\n    // TODO find out how to hide scrollbars\n    overflow: \"hidden\",\n  },\n}));\n\ninterface Props {\n  onReset: () => void;\n  settings: Settings;\n}\n\nexport function Runner({ settings, onReset }: Props) {\n  const {\n    cardCountValue,\n    currentCard,\n    cardsLeft,\n    cardsDone,\n    finished,\n    nextCard,\n  } = useDeck(settings.deckCount);\n\n  const classes = useStyles();\n\n  const [errors, setErrors] = useState(0);\n  const increaseErrors = () => setErrors((err) => err + 1);\n\n  const [startTime] = useState(() => new Date());\n  const [endTime, setEndTime] = useState<Date | null>(null);\n\n  const [rotation, setRotation] = useState(0);\n\n  const guessValue = (value: number) => () => {\n    if (!finished) {\n      if (value === cardCountValue) {\n        if (settings.realLifeMode) {\n          setRotation(Math.round(Math.random() * 180));\n        }\n        nextCard();\n      } else {\n        console.log(\n          `Incorrectly guessed ${value}, the actual value is ${cardCountValue}`\n        );\n        increaseErrors();\n      }\n    }\n  };\n\n  const reset = () => {\n    onReset();\n  };\n\n  useEffect(() => {\n    if (finished) {\n      setEndTime(new Date());\n    }\n  }, [finished]);\n\n  const transitions = useTransition(\n    { currentCard, cardCountValue },\n    ({ currentCard: c }) => (c ? c.suit + \" \" + c.value : \"NO CARD LEFT\"),\n    {\n      from: {\n        opacity: 0,\n        transform: \"translate3d(-50%,-50%,0)\",\n        // absolute position needed for card positioning not to affect each other\n        position: \"absolute\",\n      },\n      enter: { opacity: 1, transform: \"translate3d(-50%,0,0)\" },\n      leave: ({ cardCountValue: countValue }) => ({\n        opacity: 0,\n        transform: [\n          \"translate3d(-200%,0,0)\",\n          \"translate3d(-50%,100%,0)\",\n          \"translate3d(150%,0,0)\",\n        ][(countValue ?? 0) + 1],\n      }),\n    }\n  );\n\n  const errorProps = useSpring({\n    o: errors % 2,\n    from: {\n      o: 0,\n    },\n  });\n\n  const realLifeMode = useSpring({\n    r: rotation,\n    from: { r: 0 },\n  });\n\n  useHotkeys(\"right\", guessValue(+1), [guessValue]);\n  useHotkeys(\"left\", guessValue(-1), [guessValue]);\n  useHotkeys(\"down\", guessValue(0), [guessValue]);\n\n  return (\n    <div className={classes.root}>\n      <Box display=\"flex\" gridArea=\"statistics\" flexDirection=\"column\">\n        <Typography variant=\"body1\" align=\"center\">\n          {finished ? <>{cardsDone} cards done</> : <>{cardsLeft} cards left</>}\n        </Typography>\n\n        <Typography\n          variant=\"body1\"\n          align=\"center\"\n          color={errors ? \"error\" : \"initial\"}\n        >\n          {errors} mistakes made\n        </Typography>\n\n        {finished && (\n          <Typography variant=\"body1\" align=\"center\">\n            You made it in{\" \"}\n            {endTime &&\n              ((endTime.getTime() - startTime.getTime()) / 1000).toPrecision(\n                2\n              )}{\" \"}\n            seconds\n          </Typography>\n        )}\n      </Box>\n      <Box gridArea=\"content\" display=\"flex\" alignItems=\"center\">\n        {finished ? (\n          <Typography variant=\"h5\" align=\"center\">\n            {errors === 0 ? (\n              <>\n                AWESOME, you made 0 mistakes\n                <span role=\"img\" aria-label=\"well done\">\n                  🎉\n                </span>\n              </>\n            ) : (\n              <>\n                You need to practice {errors < 2 ? \"a little bit \" : \"\"}more 😉\n              </>\n            )}\n          </Typography>\n        ) : (\n          transitions.map(({ item, props, key }) => (\n            <animated.div\n              key={key}\n              style={{\n                ...props,\n              }}\n            >\n              {item.currentCard && (\n                <animated.div\n                  style={{\n                    transform: errorProps.o\n                      .interpolate({\n                        range: [0, 0.2, 0.4, 0.6, 0.8, 1],\n                        output: [0, -10, 10, -10, 10, 0],\n                      })\n                      .interpolate((o) => `translateX(${o.toPrecision(2)}%)`),\n                  }}\n                >\n                  <animated.div\n                    style={{\n                      transform: realLifeMode.r.interpolate(\n                        (r) => `rotate(${r}deg)`\n                      ),\n                    }}\n                  >\n                    <span\n                      style={{\n                        fontSize: \"200px\",\n                      }}\n                    >\n                      <PlayingCard card={item.currentCard} />\n                    </span>\n                  </animated.div>\n                </animated.div>\n              )}\n            </animated.div>\n          ))\n        )}\n      </Box>\n      <Box gridArea=\"actions\" paddingBottom={3}>\n        {finished ? (\n          <Button onClick={reset} variant=\"contained\" color=\"primary\">\n            Practice again\n          </Button>\n        ) : (\n          <ButtonGroup\n            size=\"large\"\n            variant=\"contained\"\n            disableElevation\n            color=\"primary\"\n          >\n            <Button disabled={finished} onClick={guessValue(-1)}>\n              -\n            </Button>\n            <Button disabled={finished} onClick={guessValue(0)}>\n              0\n            </Button>\n            <Button disabled={finished} onClick={guessValue(1)}>\n              +\n            </Button>\n          </ButtonGroup>\n        )}\n      </Box>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Box,\n  makeStyles,\n  Typography,\n  Checkbox,\n  FormControlLabel,\n  Slider,\n} from \"@material-ui/core\";\nimport { PlayingCard, Suit } from \"../../utils/card\";\nimport { CARD_TO_COUNT_VALUE_MAPPING } from \"../../utils/count\";\nimport { Settings } from \".\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"grid\",\n    height: \"100%\",\n    gridTemplateAreas: `\"description\" \"settings\" \"actions\"`,\n    gridTemplateRows: `1fr min-content max-content`,\n    padding: theme.spacing(),\n    justifyItems: \"center\",\n    // TODO find out how to hide scrollbars\n    overflow: \"hidden\",\n  },\n  description: {\n    gridArea: \"description\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: 0,\n  },\n  rules: {\n    display: \"grid\",\n    gridTemplateRows: \"1fr 1fr 1fr\",\n    gridTemplateColumns: \"max-content minmax(min-content, 1fr)\",\n    alignItems: \"center\",\n    overflow: \"auto\",\n    gridGap: theme.spacing(),\n    height: \"100%\",\n  },\n  value: {\n    justifySelf: \"end\",\n    ...theme.typography.h5,\n  },\n  cards: {\n    justifySelf: \"start\",\n    ...theme.typography.h1,\n    borderLeft: \"1px solid\",\n    borderLeftColor: theme.palette.action.selected,\n  },\n}));\n\ninterface Props {\n  onStart: (settings: Settings) => void;\n}\n\nfunction StartScreen(props: Props) {\n  const classes = useStyles();\n\n  const [realLifeMode, setRealLifeMode] = useState(false);\n  const [deckCount, setDeckCount] = useState(1);\n\n  const handleSliderChange = (\n    _event: React.ChangeEvent<{}>,\n    value: number | number[]\n  ) => {\n    if (typeof value === \"number\") {\n      setDeckCount(value);\n    }\n  };\n\n  const handleStart = () => {\n    props.onStart({ realLifeMode, deckCount });\n  };\n\n  return (\n    <Box className={classes.root}>\n      <Box className={classes.description}>\n        <Typography variant=\"body1\" gutterBottom>\n          In this mode you can practice assigning cards to their mental counter\n          value.\n        </Typography>\n        <Typography align=\"center\" variant=\"h5\" gutterBottom>\n          Card to mental counter - mapping\n        </Typography>\n        <Box className={classes.rules}>\n          <div className={classes.value}>-1</div>\n          <div className={classes.cards}>\n            {CARD_TO_COUNT_VALUE_MAPPING.low.map((value) => (\n              <PlayingCard card={{ suit: Suit.Spades, value }} />\n            ))}\n          </div>\n          <div className={classes.value}>0</div>\n          <div className={classes.cards}>\n            {CARD_TO_COUNT_VALUE_MAPPING.neutral.map((value) => (\n              <PlayingCard card={{ suit: Suit.Spades, value }} />\n            ))}\n          </div>\n          <div className={classes.value}>+1</div>\n          <div className={classes.cards}>\n            {CARD_TO_COUNT_VALUE_MAPPING.high.map((value) => (\n              <PlayingCard card={{ suit: Suit.Spades, value }} />\n            ))}\n          </div>\n        </Box>\n      </Box>\n\n      <Box gridArea=\"settings\">\n        <Typography variant=\"h5\">Settings</Typography>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={realLifeMode}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                setRealLifeMode(event.target.checked)\n              }\n            />\n          }\n          label=\"Real life mode\"\n        />\n        <Typography id=\"discrete-slider\" gutterBottom>\n          Amount of decks used\n        </Typography>\n        <Slider\n          value={deckCount}\n          onChange={handleSliderChange}\n          valueLabelDisplay=\"auto\"\n          step={1}\n          marks\n          min={1}\n          max={8}\n        />\n      </Box>\n      <Box gridArea=\"actions\">\n        <Button\n          onClick={handleStart}\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"large\"\n        >\n          START\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n\nexport default StartScreen;\n","import React, { useState } from \"react\";\n\nimport { Box, Typography } from \"@material-ui/core\";\n\nimport { Runner } from \"./Game\";\nimport StartScreen from \"./StartScreen\";\n\nexport interface Settings {\n  realLifeMode: boolean;\n  deckCount: number;\n}\n\nexport const initialSettings: Settings = {\n  realLifeMode: false,\n  deckCount: 1,\n};\n\nexport function PracticeBasicCounting() {\n  const [started, setStarted] = useState(false);\n\n  const [settings, setSettings] = useState<Settings>(initialSettings);\n\n  const handleStart = (settings: Settings) => {\n    setSettings(settings);\n    setStarted(true);\n  };\n\n  const handleReset = () => setStarted(false);\n\n  return (\n    <>\n      <Box>\n        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n          Practice Basic Counting\n        </Typography>\n      </Box>\n      {started ? (\n        <Runner onReset={handleReset} settings={settings} />\n      ) : (\n        <StartScreen onStart={handleStart} />\n      )}\n    </>\n  );\n}\n","import { Routes } from \"./routes\";\nimport { Home } from \"./Home\";\nimport { PracticeBasicCounting } from \"./PracticeBasicCounting\";\n\nconst routeToComponentMapping: Record<Routes, React.ComponentType> = {\n  [Routes.Home]: Home,\n  [Routes.PracticeBasicCounting]: PracticeBasicCounting,\n};\n\nexport function getRouteComponent(route: Routes): React.ComponentType {\n  return routeToComponentMapping[route];\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getUrl, Routes } from \"../routes\";\n\nexport function Home() {\n  return (\n    <div>\n      HOME\n      <Link to={getUrl(Routes.PracticeBasicCounting)}>\n        Practice Basic Counting\n      </Link>\n    </div>\n  );\n}\n","import React, { PropsWithChildren } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100%\",\n    minHeight: 0,\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: theme.spacing(),\n  },\n}));\n\nfunction Main({ children }: PropsWithChildren<{}>) {\n  const classes = useStyles();\n\n  return <div className={classes.root}>{children}</div>;\n}\n\nexport default Main;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"fontsource-roboto\";\n\nimport { getRouteComponent } from \"./pages/mapping\";\nimport { Routes, getUrl } from \"./pages/routes\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core\";\nimport Main from \"./containers/Main\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#086788\",\n    },\n    secondary: { main: \"#F0C808\" },\n    background: {\n      default: \"#D7EAD7\",\n      paper: \"#076324\",\n    },\n  },\n  overrides: {\n    MuiCssBaseline: {\n      \"@global\": {\n        \"html, body, #root\": {\n          height: \"100%\",\n          overflow: \"hidden\",\n        },\n      },\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router>\n        <Main>\n          <Switch>\n            {Object.keys(Routes).map((routeKey) => {\n              const route = Routes[(routeKey as any) as keyof typeof Routes];\n              const RouteComponent = getRouteComponent(route);\n              return (\n                <Route exact key={route} path={getUrl(route)}>\n                  <RouteComponent />\n                </Route>\n              );\n            })}\n          </Switch>\n        </Main>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}