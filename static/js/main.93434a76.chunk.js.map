{"version":3,"sources":["pages/routes.ts","utils/card.tsx","utils/deck.ts","utils/count.ts","pages/PracticeBasicCounting/CurrentCountDialog.tsx","pages/PracticeBasicCounting/Game.tsx","pages/PracticeBasicCounting/StartScreen.tsx","pages/PracticeBasicCounting/index.tsx","pages/mapping.ts","pages/Home/index.tsx","containers/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Routes","routeToUrlMapping","Home","PracticeBasicCounting","getUrl","route","Value","Suit","RED_SUITS","Hearts","Diamonds","String","fromCodePoint","PlayingCard","props","style","color","card","includes","suit","userSelect","value","getCardEmoji","defaultDeck","Spades","Clubs","Ace","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King","push","createDeck","options","cardAmountFactor","deck","i","shuffle","CARD_TO_COUNT_VALUE_MAPPING","high","neutral","low","getCardCountValue","CurrentCountDialog","correctValue","onClose","useState","amount","values","correctIndex","Math","floor","random","generateValues","fakeValues","failingValues","setFailingValues","Dialog","open","DialogTitle","DialogContent","DialogContentText","Box","display","flexWrap","justifyContent","alignItems","map","v","Button","disabled","onClick","vs","useDeck","deckAmount","setDeck","currentIndex","setCurrentIndex","nextCard","useCallback","currentCard","finished","deckCountValueWithoutCurrentCard","reduce","acc","next","getDeckCountValue","slice","cardCountValue","cardsLeft","length","cardsDone","reset","randomRotation","round","randomShouldAskForCurrentCount","useStyles","makeStyles","theme","root","height","padding","spacing","gridTemplateAreas","gridTemplateRows","justifyItems","overflow","Runner","settings","onReset","deckCount","classes","errors","setErrors","Date","startTime","endTime","setEndTime","realLifeMode","rotation","setRotation","askForCurrentCount","shouldAskForCurrentCount","setShouldAskForCurrentCount","guessValue","console","log","err","useEffect","transitions","useTransition","c","from","opacity","transform","position","enter","leave","countValue","errorProps","useSpring","o","r","useHotkeys","className","gridArea","flexDirection","Typography","variant","align","getTime","toPrecision","role","aria-label","item","key","div","interpolate","range","output","fontSize","paddingBottom","ButtonGroup","size","disableElevation","description","minHeight","rules","gridTemplateColumns","gridGap","justifySelf","typography","h5","cards","h1","borderLeft","borderLeftColor","palette","action","selected","StartScreen","setRealLifeMode","setAskForCurrentCount","setDeckCount","gutterBottom","FormControlLabel","control","Checkbox","checked","onChange","event","target","label","id","Slider","_event","valueLabelDisplay","step","marks","min","max","onStart","initialSettings","routeToComponentMapping","to","started","setStarted","setSettings","Main","children","createMuiTheme","primary","main","secondary","background","default","overrides","MuiCssBaseline","App","ThemeProvider","CssBaseline","Object","keys","routeKey","RouteComponent","getRouteComponent","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.93434a76.chunk.js","sourcesContent":["export enum Routes {\n  Home = \"Home\",\n  PracticeBasicCounting = \"PracticeBasicCounting\",\n}\n\nconst routeToUrlMapping: Record<Routes, string> = {\n  [Routes.Home]: \"/\",\n  [Routes.PracticeBasicCounting]: \"/practice/counting-basic\",\n};\n\nexport function getUrl(route: Routes): string {\n  return routeToUrlMapping[route];\n}\n","import React from \"react\";\n\nexport enum Value {\n  Ace,\n  Two,\n  Three,\n  Four,\n  Five,\n  Six,\n  Seven,\n  Eight,\n  Nine,\n  Ten,\n  Jack,\n  Queen = 12,\n  King = 13,\n}\n\nexport enum Suit {\n  Spades,\n  Hearts,\n  Diamonds,\n  Clubs,\n}\n\nconst RED_SUITS = [Suit.Hearts, Suit.Diamonds];\n\nexport interface Card {\n  value: Value;\n  suit: Suit;\n}\n\nconst START_POINT = 0x1f0a1;\n\nconst STEP = 0x0010;\n\nconst PLAYING_CARD_BACK = 0x1f0a0;\n\nexport const PLAYING_CARD_BACK_EMOJI = String.fromCodePoint(PLAYING_CARD_BACK);\n\nexport function getCardEmoji(card: Card) {\n  return String.fromCodePoint(START_POINT + card.suit * STEP + card.value);\n}\n\nexport function PlayingCard(props: { card: Card }) {\n  return (\n    <span\n      style={{\n        color: isRedCard(props.card) ? \"red\" : \"black\",\n        userSelect: \"none\",\n      }}\n    >\n      {getCardEmoji(props.card)}\n    </span>\n  );\n}\n\nexport function isRedCard(card: Card) {\n  return RED_SUITS.includes(card.suit);\n}\n","import { Card, Suit, Value } from \"./card\";\nimport shuffle from \"shuffle-array\";\n\nexport type Deck = Card[];\n\nconst defaultDeck: Deck = [];\nfor (const suit of [Suit.Spades, Suit.Hearts, Suit.Diamonds, Suit.Clubs]) {\n  for (const value of [\n    Value.Ace,\n    Value.Two,\n    Value.Three,\n    Value.Four,\n    Value.Five,\n    Value.Six,\n    Value.Seven,\n    Value.Eight,\n    Value.Nine,\n    Value.Ten,\n    Value.Jack,\n    Value.Queen,\n    Value.King,\n  ]) {\n    defaultDeck.push({ suit, value });\n  }\n}\n\ninterface CreateDeckOptions {\n  /**\n   * the number of decks used - cardAmountFactor * 52 is the number of cards used\n   */\n  cardAmountFactor?: number;\n}\n\nexport function createDeck(options?: CreateDeckOptions) {\n  const { cardAmountFactor = 1 } = options ?? {};\n\n  const deck: Deck = [];\n\n  for (let i = 0; i < cardAmountFactor; i++) {\n    deck.push(...defaultDeck);\n  }\n\n  shuffle(deck);\n\n  return deck;\n}\n","import { Card, Value } from \"./card\";\nimport { Deck } from \"./deck\";\n\nexport const CARD_TO_COUNT_VALUE_MAPPING = {\n  high: [Value.Ace, Value.King, Value.Queen, Value.Jack, Value.Ten],\n  neutral: [Value.Seven, Value.Eight, Value.Nine],\n  low: [Value.Six, Value.Five, Value.Four, Value.Three, Value.Two],\n};\n\nexport function getCardCountValue(card: Card): -1 | 0 | 1 {\n  if (CARD_TO_COUNT_VALUE_MAPPING.high.includes(card.value)) {\n    return -1;\n  } else if (CARD_TO_COUNT_VALUE_MAPPING.neutral.includes(card.value)) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\nconst INITIAL_DECK_COUNT_VALUE = 0;\n\nexport function getDeckCountValue(deck: Deck): number {\n  return deck.reduce(\n    (acc, next) => acc + getCardCountValue(next),\n    INITIAL_DECK_COUNT_VALUE\n  );\n}\n","import React, { useState } from \"react\";\n\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  Button,\n  Box,\n} from \"@material-ui/core\";\n\nfunction generateValues(correctValue: number, amount = 8): number[] {\n  const values = [];\n  const correctIndex = Math.floor(Math.random() * amount);\n\n  for (let i = 0; i < correctIndex; i++) {\n    values.push(correctValue - (correctIndex - i));\n  }\n\n  values.push(correctValue);\n\n  for (let i = correctIndex + 1; i < amount; i++) {\n    values.push(correctValue + (i - correctIndex));\n  }\n\n  return values;\n}\n\ninterface Props {\n  onClose: () => void;\n  correctValue: number;\n}\n\nexport function CurrentCountDialog({ correctValue, onClose }: Props) {\n  const [fakeValues] = useState(generateValues(correctValue));\n\n  const [failingValues, setFailingValues] = useState<number[]>([]);\n\n  const guessValue = (value: number) => {\n    if (value === correctValue) {\n      onClose();\n    } else {\n      setFailingValues((vs) => [...vs, value]);\n    }\n  };\n\n  return (\n    <Dialog open>\n      <DialogTitle>Pick current total count value</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Pick the correct current total count value (excluding the current card\n          value) from the list below.\n        </DialogContentText>\n\n        <Box\n          display=\"flex\"\n          flexWrap=\"wrap\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          {fakeValues.map((v) => (\n            <Button\n              disabled={failingValues.includes(v)}\n              onClick={() => guessValue(v)}\n            >\n              {v}\n            </Button>\n          ))}\n        </Box>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { Card, PlayingCard } from \"../../utils/card\";\nimport { createDeck } from \"../../utils/deck\";\nimport { getDeckCountValue, getCardCountValue } from \"../../utils/count\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { Typography, Box, makeStyles } from \"@material-ui/core\";\n\nimport { animated, useTransition, useSpring } from \"react-spring\";\n\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport { Settings } from \".\";\nimport { CurrentCountDialog } from \"./CurrentCountDialog\";\n\nfunction useDeck(deckAmount: number) {\n  const [deck, setDeck] = useState(() =>\n    createDeck({ cardAmountFactor: deckAmount })\n  );\n\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const nextCard = useCallback(() => setCurrentIndex((v) => v + 1), []);\n\n  const currentCard = (deck[currentIndex] || null) as Card | null;\n\n  const finished = currentCard === null;\n\n  const deckCountValueWithoutCurrentCard = getDeckCountValue(\n    deck.slice(0, currentIndex)\n  );\n\n  const cardCountValue = currentCard ? getCardCountValue(currentCard) : null;\n\n  const cardsLeft = deck.length - currentIndex;\n\n  const reset = () => {\n    setDeck(createDeck({ cardAmountFactor: deckAmount }));\n    setCurrentIndex(0);\n  };\n\n  return {\n    deck,\n    currentIndex,\n    nextCard,\n    currentCard,\n    finished,\n    deckCountValueWithoutCurrentCard,\n    cardCountValue,\n    cardsLeft,\n    cardsDone: currentIndex,\n    reset,\n  };\n}\n\nfunction randomRotation(): number {\n  return Math.round(Math.random() * 180);\n}\n\nconst ASK_PROBABILITY = 0.05;\n\nfunction randomShouldAskForCurrentCount(): boolean {\n  return Math.random() < ASK_PROBABILITY;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"grid\",\n    height: \"100%\",\n    padding: theme.spacing(),\n    gridTemplateAreas: `\"statistics\" \"content\" \"actions\"`,\n    gridTemplateRows: `min-content 1fr min-content`,\n    justifyItems: \"center\",\n    // TODO find out how to hide scrollbars\n    overflow: \"hidden\",\n  },\n}));\n\ninterface Props {\n  onReset: () => void;\n  settings: Settings;\n}\n\nexport function Runner({ settings, onReset }: Props) {\n  const {\n    cardCountValue,\n    deckCountValueWithoutCurrentCard,\n    currentCard,\n    cardsLeft,\n    cardsDone,\n    finished,\n    nextCard,\n  } = useDeck(settings.deckCount);\n\n  const classes = useStyles();\n\n  const [errors, setErrors] = useState(0);\n  const increaseErrors = () => setErrors((err) => err + 1);\n\n  const [startTime] = useState(() => new Date());\n  const [endTime, setEndTime] = useState<Date | null>(null);\n\n  const [rotation, setRotation] = useState(\n    settings.realLifeMode ? randomRotation : 0\n  );\n\n  const [shouldAskForCurrentCount, setShouldAskForCurrentCount] = useState(\n    settings.askForCurrentCount ? randomShouldAskForCurrentCount : false\n  );\n\n  const guessValue = (value: number) => () => {\n    if (!finished) {\n      if (value === cardCountValue) {\n        if (settings.realLifeMode) {\n          setRotation(randomRotation);\n        }\n        if (settings.askForCurrentCount) {\n          setShouldAskForCurrentCount(randomShouldAskForCurrentCount());\n        }\n        nextCard();\n      } else {\n        console.log(\n          `Incorrectly guessed ${value}, the actual value is ${cardCountValue}`\n        );\n        increaseErrors();\n      }\n    }\n  };\n\n  const reset = () => {\n    onReset();\n  };\n\n  useEffect(() => {\n    if (finished) {\n      setEndTime(new Date());\n    }\n  }, [finished]);\n\n  const transitions = useTransition(\n    { currentCard, cardCountValue },\n    ({ currentCard: c }) => (c ? c.suit + \" \" + c.value : \"NO CARD LEFT\"),\n    {\n      from: {\n        opacity: 0,\n        transform: \"translate3d(-50%,-50%,0)\",\n        // absolute position needed for card positioning not to affect each other\n        position: \"absolute\",\n      },\n      enter: { opacity: 1, transform: \"translate3d(-50%,0,0)\" },\n      leave: ({ cardCountValue: countValue }) => ({\n        opacity: 0,\n        transform: [\n          \"translate3d(-200%,0,0)\",\n          \"translate3d(-50%,100%,0)\",\n          \"translate3d(150%,0,0)\",\n        ][(countValue ?? 0) + 1],\n      }),\n    }\n  );\n\n  const errorProps = useSpring({\n    o: errors % 2,\n    from: {\n      o: 0,\n    },\n  });\n\n  const realLifeMode = useSpring({\n    r: rotation,\n    from: { r: 0 },\n  });\n\n  useHotkeys(\"right\", guessValue(+1), [guessValue]);\n  useHotkeys(\"left\", guessValue(-1), [guessValue]);\n  useHotkeys(\"down\", guessValue(0), [guessValue]);\n\n  return (\n    <div className={classes.root}>\n      <Box display=\"flex\" gridArea=\"statistics\" flexDirection=\"column\">\n        <Typography variant=\"body1\" align=\"center\">\n          {finished ? <>{cardsDone} cards done</> : <>{cardsLeft} cards left</>}\n        </Typography>\n\n        <Typography\n          variant=\"body1\"\n          align=\"center\"\n          color={errors ? \"error\" : \"initial\"}\n        >\n          {errors} mistakes made\n        </Typography>\n\n        {!finished && (\n          <Box color=\"error.main\" display=\"flex\" justifyContent=\"center\">\n            <Button color=\"inherit\" variant=\"outlined\" onClick={reset}>\n              Give up\n            </Button>\n          </Box>\n        )}\n\n        {finished && (\n          <Typography variant=\"body1\" align=\"center\">\n            You made it in{\" \"}\n            {endTime &&\n              ((endTime.getTime() - startTime.getTime()) / 1000).toPrecision(\n                2\n              )}{\" \"}\n            seconds\n          </Typography>\n        )}\n      </Box>\n      <Box gridArea=\"content\" display=\"flex\" alignItems=\"center\">\n        {finished ? (\n          <Typography variant=\"h5\" align=\"center\">\n            {errors === 0 ? (\n              <>\n                AWESOME, you made 0 mistakes\n                <span role=\"img\" aria-label=\"well done\">\n                  🎉\n                </span>\n              </>\n            ) : (\n              <>\n                You need to practice {errors < 2 ? \"a little bit \" : \"\"}more 😉\n              </>\n            )}\n          </Typography>\n        ) : (\n          transitions.map(({ item, props, key }) => (\n            <animated.div\n              key={key}\n              style={{\n                ...props,\n              }}\n            >\n              {item.currentCard && (\n                <animated.div\n                  style={{\n                    transform: errorProps.o\n                      .interpolate({\n                        range: [0, 0.2, 0.4, 0.6, 0.8, 1],\n                        output: [0, -10, 10, -10, 10, 0],\n                      })\n                      .interpolate((o) => `translateX(${o.toPrecision(2)}%)`),\n                  }}\n                >\n                  <animated.div\n                    style={{\n                      transform: realLifeMode.r.interpolate(\n                        (r) => `rotate(${r}deg)`\n                      ),\n                    }}\n                  >\n                    <span\n                      style={{\n                        fontSize: \"200px\",\n                      }}\n                    >\n                      <PlayingCard card={item.currentCard} />\n                    </span>\n                  </animated.div>\n                </animated.div>\n              )}\n            </animated.div>\n          ))\n        )}\n      </Box>\n      <Box gridArea=\"actions\" paddingBottom={3}>\n        {finished ? (\n          <Button onClick={reset} variant=\"contained\" color=\"primary\">\n            Practice again\n          </Button>\n        ) : (\n          <ButtonGroup\n            size=\"large\"\n            variant=\"contained\"\n            disableElevation\n            color=\"primary\"\n          >\n            <Button disabled={finished} onClick={guessValue(-1)}>\n              -\n            </Button>\n            <Button disabled={finished} onClick={guessValue(0)}>\n              0\n            </Button>\n            <Button disabled={finished} onClick={guessValue(1)}>\n              +\n            </Button>\n          </ButtonGroup>\n        )}\n      </Box>\n\n      {shouldAskForCurrentCount && (\n        <CurrentCountDialog\n          onClose={() => setShouldAskForCurrentCount(false)}\n          correctValue={deckCountValueWithoutCurrentCard}\n        />\n      )}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Box,\n  makeStyles,\n  Typography,\n  Checkbox,\n  FormControlLabel,\n  Slider,\n} from \"@material-ui/core\";\nimport { PlayingCard, Suit } from \"../../utils/card\";\nimport { CARD_TO_COUNT_VALUE_MAPPING } from \"../../utils/count\";\nimport { Settings } from \".\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"grid\",\n    height: \"100%\",\n    gridTemplateAreas: `\"description\" \"settings\" \"actions\"`,\n    gridTemplateRows: `1fr min-content max-content`,\n    padding: theme.spacing(),\n    justifyItems: \"center\",\n    // TODO find out how to hide scrollbars\n    overflow: \"hidden\",\n  },\n  description: {\n    gridArea: \"description\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: 0,\n  },\n  rules: {\n    display: \"grid\",\n    gridTemplateRows: \"1fr 1fr 1fr\",\n    gridTemplateColumns: \"max-content minmax(min-content, 1fr)\",\n    alignItems: \"center\",\n    overflow: \"auto\",\n    gridGap: theme.spacing(),\n    height: \"100%\",\n  },\n  value: {\n    justifySelf: \"end\",\n    ...theme.typography.h5,\n  },\n  cards: {\n    justifySelf: \"start\",\n    ...theme.typography.h1,\n    borderLeft: \"1px solid\",\n    borderLeftColor: theme.palette.action.selected,\n  },\n}));\n\ninterface Props {\n  onStart: (settings: Settings) => void;\n}\n\nfunction StartScreen(props: Props) {\n  const classes = useStyles();\n\n  const [realLifeMode, setRealLifeMode] = useState(false);\n  const [askForCurrentCount, setAskForCurrentCount] = useState(false);\n  const [deckCount, setDeckCount] = useState(1);\n\n  const handleSliderChange = (\n    _event: React.ChangeEvent<{}>,\n    value: number | number[]\n  ) => {\n    if (typeof value === \"number\") {\n      setDeckCount(value);\n    }\n  };\n\n  const handleStart = () => {\n    props.onStart({ realLifeMode, deckCount, askForCurrentCount });\n  };\n\n  return (\n    <Box className={classes.root}>\n      <Box className={classes.description}>\n        <Typography variant=\"body1\" gutterBottom>\n          In this mode you can practice assigning cards to their mental counter\n          value.\n        </Typography>\n        <Typography align=\"center\" variant=\"h5\" gutterBottom>\n          Card to mental counter - mapping\n        </Typography>\n        <Box className={classes.rules}>\n          <div className={classes.value}>+1</div>\n          <div className={classes.cards}>\n            {CARD_TO_COUNT_VALUE_MAPPING.low.map((value) => (\n              <PlayingCard key={value} card={{ suit: Suit.Spades, value }} />\n            ))}\n          </div>\n          <div className={classes.value}>0</div>\n          <div className={classes.cards}>\n            {CARD_TO_COUNT_VALUE_MAPPING.neutral.map((value) => (\n              <PlayingCard key={value} card={{ suit: Suit.Spades, value }} />\n            ))}\n          </div>\n          <div className={classes.value}>-1</div>\n          <div className={classes.cards}>\n            {CARD_TO_COUNT_VALUE_MAPPING.high.map((value) => (\n              <PlayingCard key={value} card={{ suit: Suit.Spades, value }} />\n            ))}\n          </div>\n        </Box>\n      </Box>\n\n      <Box gridArea=\"settings\">\n        <Typography variant=\"h5\">Settings</Typography>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={realLifeMode}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                setRealLifeMode(event.target.checked)\n              }\n            />\n          }\n          label=\"Real life mode\"\n        />\n        <Typography id=\"discrete-slider\" gutterBottom>\n          Amount of decks used\n        </Typography>\n        <Slider\n          value={deckCount}\n          onChange={handleSliderChange}\n          valueLabelDisplay=\"auto\"\n          step={1}\n          marks\n          min={1}\n          max={8}\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={askForCurrentCount}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                setAskForCurrentCount(event.target.checked)\n              }\n            />\n          }\n          label=\"Ask for current total count while playing\"\n        />\n      </Box>\n      <Box gridArea=\"actions\">\n        <Button\n          onClick={handleStart}\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"large\"\n        >\n          START\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n\nexport default StartScreen;\n","import React, { useState } from \"react\";\n\nimport { Box, Typography } from \"@material-ui/core\";\n\nimport { Runner } from \"./Game\";\nimport StartScreen from \"./StartScreen\";\n\nexport interface Settings {\n  realLifeMode: boolean;\n  deckCount: number;\n  askForCurrentCount: boolean;\n}\n\nexport const initialSettings: Settings = {\n  realLifeMode: false,\n  deckCount: 1,\n  askForCurrentCount: false,\n};\n\nexport function PracticeBasicCounting() {\n  const [started, setStarted] = useState(false);\n\n  const [settings, setSettings] = useState<Settings>(initialSettings);\n\n  const handleStart = (settings: Settings) => {\n    setSettings(settings);\n    setStarted(true);\n  };\n\n  const handleReset = () => setStarted(false);\n\n  return (\n    <>\n      <Box>\n        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n          Practice Basic Counting\n        </Typography>\n      </Box>\n      {started ? (\n        <Runner onReset={handleReset} settings={settings} />\n      ) : (\n        <StartScreen onStart={handleStart} />\n      )}\n    </>\n  );\n}\n","import { Routes } from \"./routes\";\nimport { Home } from \"./Home\";\nimport { PracticeBasicCounting } from \"./PracticeBasicCounting\";\n\nconst routeToComponentMapping: Record<Routes, React.ComponentType> = {\n  [Routes.Home]: Home,\n  [Routes.PracticeBasicCounting]: PracticeBasicCounting,\n};\n\nexport function getRouteComponent(route: Routes): React.ComponentType {\n  return routeToComponentMapping[route];\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getUrl, Routes } from \"../routes\";\n\nexport function Home() {\n  return (\n    <div>\n      HOME\n      <Link to={getUrl(Routes.PracticeBasicCounting)}>\n        Practice Basic Counting\n      </Link>\n    </div>\n  );\n}\n","import React, { PropsWithChildren } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100%\",\n    minHeight: 0,\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: theme.spacing(),\n  },\n}));\n\nfunction Main({ children }: PropsWithChildren<{}>) {\n  const classes = useStyles();\n\n  return <div className={classes.root}>{children}</div>;\n}\n\nexport default Main;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"fontsource-roboto\";\n\nimport { getRouteComponent } from \"./pages/mapping\";\nimport { Routes, getUrl } from \"./pages/routes\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core\";\nimport Main from \"./containers/Main\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#086788\",\n    },\n    secondary: { main: \"#F0C808\" },\n    background: {\n      default: \"#dfd\",\n    },\n  },\n  overrides: {\n    MuiCssBaseline: {\n      \"@global\": {\n        \"html, body, #root\": {\n          height: \"100%\",\n          overflow: \"hidden\",\n        },\n      },\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router>\n        <Main>\n          <Switch>\n            {Object.keys(Routes).map((routeKey) => {\n              const route = Routes[(routeKey as any) as keyof typeof Routes];\n              const RouteComponent = getRouteComponent(route);\n              return (\n                <Route exact key={route} path={getUrl(route)}>\n                  <RouteComponent />\n                </Route>\n              );\n            })}\n          </Switch>\n        </Main>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}