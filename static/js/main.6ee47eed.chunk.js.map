{"version":3,"sources":["pages/routes.ts","utils/card.ts","utils/deck.ts","utils/count.ts","pages/PracticeBasicCounting/index.tsx","pages/mapping.ts","pages/Home/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Routes","routeToUrlMapping","Home","PracticeBasicCounting","getUrl","route","Value","Suit","String","fromCodePoint","defaultDeck","Spades","Hearts","Diamonds","Clubs","suit","Ace","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King","value","push","createDeck","options","cardAmountFactor","deck","i","shuffle","getCardCountValue","card","includes","useDeck","deckAmount","useState","setDeck","currentIndex","setCurrentIndex","nextCard","useCallback","v","currentCard","finished","deckCountValueWithoutCurrentCard","reduce","acc","next","getDeckCountValue","slice","cardCountValue","cardsLeft","length","cardsDone","reset","Runner","resetDeck","errors","setErrors","guessValue","err","alert","Box","display","gridArea","flexDirection","Typography","variant","align","color","alignItems","role","aria-label","style","fontSize","paddingBottom","Button","onClick","ButtonGroup","disableElevation","disabled","useStyles","makeStyles","theme","root","height","padding","spacing","gridTemplateAreas","gridTemplateRows","justifyItems","routeToComponentMapping","to","classes","className","gutterBottom","createMuiTheme","palette","primary","main","secondary","background","default","paper","overrides","MuiCssBaseline","App","ThemeProvider","CssBaseline","basename","process","Object","keys","map","routeKey","RouteComponent","getRouteComponent","exact","key","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ee47eed.chunk.js","sourcesContent":["export enum Routes {\n  Home = \"Home\",\n  PracticeBasicCounting = \"PracticeBasicCounting\",\n}\n\nconst routeToUrlMapping: Record<Routes, string> = {\n  [Routes.Home]: \"/\",\n  [Routes.PracticeBasicCounting]: \"/practice/counting-basic\",\n};\n\nexport function getUrl(route: Routes): string {\n  return routeToUrlMapping[route];\n}\n","export enum Value {\n  Ace,\n  Two,\n  Three,\n  Four,\n  Five,\n  Six,\n  Seven,\n  Eight,\n  Nine,\n  Ten,\n  Jack,\n  Queen = 12,\n  King = 13,\n}\n\nexport enum Suit {\n  Spades,\n  Hearts,\n  Diamonds,\n  Clubs,\n}\n\nexport interface Card {\n  value: Value;\n  suit: Suit;\n}\n\nconst START_POINT = 0x1f0a1;\n\nconst STEP = 0x0010;\n\nconst PLAYING_CARD_BACK = 0x1f0a0;\n\nexport const PLAYING_CARD_BACK_EMOJI = String.fromCodePoint(PLAYING_CARD_BACK);\n\nexport function getCardEmoji(card: Card) {\n  return String.fromCodePoint(START_POINT + card.suit * STEP + card.value);\n}\n","import { Card, Suit, Value } from \"./card\";\nimport shuffle from \"shuffle-array\";\n\nexport type Deck = Card[];\n\nconst defaultDeck: Deck = [];\nfor (const suit of [Suit.Spades, Suit.Hearts, Suit.Diamonds, Suit.Clubs]) {\n  for (const value of [\n    Value.Ace,\n    Value.Two,\n    Value.Three,\n    Value.Four,\n    Value.Five,\n    Value.Six,\n    Value.Seven,\n    Value.Eight,\n    Value.Nine,\n    Value.Ten,\n    Value.Jack,\n    Value.Queen,\n    Value.King,\n  ]) {\n    defaultDeck.push({ suit, value });\n  }\n}\n\ninterface CreateDeckOptions {\n  /**\n   * the number of decks used - cardAmountFactor * 52 is the number of cards used\n   */\n  cardAmountFactor?: number;\n}\n\nexport function createDeck(options?: CreateDeckOptions) {\n  const { cardAmountFactor = 1 } = options ?? {};\n\n  const deck: Deck = [];\n\n  for (let i = 0; i < cardAmountFactor; i++) {\n    deck.push(...defaultDeck);\n  }\n\n  shuffle(deck);\n\n  return deck;\n}\n","import { Card, Value } from \"./card\";\nimport { Deck } from \"./deck\";\n\nexport function getCardCountValue(card: Card): -1 | 0 | 1 {\n  if (\n    [Value.Ace, Value.King, Value.Queen, Value.Jack, Value.Ten].includes(\n      card.value\n    )\n  ) {\n    return -1;\n  } else if ([Value.Seven, Value.Eight, Value.Nine].includes(card.value)) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\nconst INITIAL_DECK_COUNT_VALUE = 0;\n\nexport function getDeckCountValue(deck: Deck): number {\n  return deck.reduce(\n    (acc, next) => acc + getCardCountValue(next),\n    INITIAL_DECK_COUNT_VALUE\n  );\n}\n","import React, { useState, useCallback } from \"react\";\nimport { getCardEmoji, Card } from \"../../utils/card\";\nimport { createDeck } from \"../../utils/deck\";\nimport { getDeckCountValue, getCardCountValue } from \"../../utils/count\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { Typography, Box, makeStyles } from \"@material-ui/core\";\n\nfunction useDeck(deckAmount: number) {\n  const [deck, setDeck] = useState(() =>\n    createDeck({ cardAmountFactor: deckAmount })\n  );\n\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const nextCard = useCallback(() => setCurrentIndex((v) => v + 1), []);\n\n  const currentCard: Card | null = deck[currentIndex] || null;\n\n  const finished = currentCard === null;\n\n  const deckCountValueWithoutCurrentCard = getDeckCountValue(\n    deck.slice(0, currentIndex)\n  );\n\n  const cardCountValue = currentCard ? getCardCountValue(currentCard) : null;\n\n  const cardsLeft = deck.length - currentIndex;\n\n  const reset = () => {\n    setDeck(createDeck({ cardAmountFactor: deckAmount }));\n    setCurrentIndex(0);\n  };\n\n  return {\n    deck,\n    currentIndex,\n    nextCard,\n    currentCard,\n    finished,\n    deckCountValueWithoutCurrentCard,\n    cardCountValue,\n    cardsLeft,\n    cardsDone: currentIndex,\n    reset,\n  };\n}\n\nfunction Runner() {\n  const {\n    cardCountValue,\n    currentCard,\n    cardsLeft,\n    cardsDone,\n    finished,\n    reset: resetDeck,\n    nextCard,\n  } = useDeck(1);\n\n  const [errors, setErrors] = useState(0);\n  const increaseErrors = () => setErrors((err) => err + 1);\n\n  const guessValue = (value: number) => () => {\n    if (value === cardCountValue) {\n      nextCard();\n    } else {\n      increaseErrors();\n      alert(\"WRONG\");\n    }\n  };\n\n  const reset = () => {\n    resetDeck();\n    setErrors(0);\n  };\n\n  return (\n    <>\n      <Box display=\"flex\" gridArea=\"statistics\" flexDirection=\"column\">\n        <Typography variant=\"body1\" align=\"center\">\n          {finished ? <>{cardsDone} cards done</> : <>{cardsLeft} cards left</>}\n        </Typography>\n\n        <Typography\n          variant=\"body1\"\n          align=\"center\"\n          color={errors ? \"error\" : \"initial\"}\n        >\n          {errors} mistakes made\n        </Typography>\n      </Box>\n      <Box gridArea=\"content\" display=\"flex\" alignItems=\"center\">\n        {finished ? (\n          <Typography variant=\"h5\" align=\"center\">\n            {errors === 0 ? (\n              <>\n                AWESOME, you made 0 mistakes\n                <span role=\"img\" aria-label=\"well done\">\n                  🎉\n                </span>\n              </>\n            ) : (\n              <>\n                You need to practice {errors < 2 ? \"a little bit \" : \"\"}more 😉\n              </>\n            )}\n          </Typography>\n        ) : (\n          <div style={{ fontSize: \"200px\" }}>\n            {currentCard && getCardEmoji(currentCard)}\n          </div>\n        )}\n      </Box>\n      <Box gridArea=\"actions\" paddingBottom={3}>\n        {finished ? (\n          <Button onClick={reset} variant=\"contained\" color=\"primary\">\n            Practice again\n          </Button>\n        ) : (\n          <ButtonGroup variant=\"contained\" disableElevation color=\"primary\">\n            <Button disabled={finished} onClick={guessValue(-1)}>\n              -\n            </Button>\n            <Button disabled={finished} onClick={guessValue(0)}>\n              0\n            </Button>\n            <Button disabled={finished} onClick={guessValue(1)}>\n              +\n            </Button>\n          </ButtonGroup>\n        )}\n      </Box>\n    </>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"grid\",\n    height: \"100%\",\n    padding: theme.spacing(),\n    gridTemplateAreas: `\"heading\" \"statistics\" \"content\" \"actions\"`,\n    gridTemplateRows: `min-content min-content 1fr min-content`,\n    justifyItems: \"center\",\n  },\n}));\n\nexport function PracticeBasicCounting() {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Box gridArea=\"heading\">\n        <Typography\n          variant=\"h4\"\n          align=\"center\"\n          gutterBottom\n          style={{ gridArea: \"heading\" }}\n        >\n          Practice Basic Counting\n        </Typography>\n      </Box>\n      <Runner />\n    </div>\n  );\n}\n","import { Routes } from \"./routes\";\nimport { Home } from \"./Home\";\nimport { PracticeBasicCounting } from \"./PracticeBasicCounting\";\n\nconst routeToComponentMapping: Record<Routes, React.ComponentType> = {\n  [Routes.Home]: Home,\n  [Routes.PracticeBasicCounting]: PracticeBasicCounting,\n};\n\nexport function getRouteComponent(route: Routes): React.ComponentType {\n  return routeToComponentMapping[route];\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getUrl, Routes } from \"../routes\";\n\nexport function Home() {\n  return (\n    <div>\n      HOME\n      <Link to={getUrl(Routes.PracticeBasicCounting)}>\n        Practice Basic Counting\n      </Link>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { getRouteComponent } from \"./pages/mapping\";\nimport { Routes, getUrl } from \"./pages/routes\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#086788\",\n    },\n    secondary: { main: \"#F0C808\" },\n    background: {\n      default: \"#D7EAD7\",\n      paper: \"#076324\",\n    },\n  },\n  overrides: {\n    MuiCssBaseline: {\n      \"@global\": {\n        \"html, body, #root\": {\n          height: \"100%\",\n        },\n      },\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          {Object.keys(Routes).map((routeKey) => {\n            const route = Routes[(routeKey as any) as keyof typeof Routes];\n            const RouteComponent = getRouteComponent(route);\n            return (\n              <Route exact key={route} path={getUrl(route)}>\n                <RouteComponent />\n              </Route>\n            );\n          })}\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}